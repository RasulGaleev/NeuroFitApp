from typing import Optional

from users.models import CustomUser


def get_system_message(user: CustomUser, task: Optional[str] = None) -> dict:
    username = user.username
    birth_date = getattr(user, "date_of_birth", None)
    formatted_birth_date = birth_date.strftime('%d.%m.%Y') if birth_date else "Не указана"
    gender = getattr(user, "gender", "Не указан")
    height = getattr(user, "height", "Не указан")
    weight = getattr(user, "weight", "Не указан")
    goal = user.get_goal_display() if user.goal else "Не указана"
    fitness_level = user.get_fitness_level_display() if user.fitness_level else "Не указан"
    has_equipment = getattr(user, "has_equipment", True)

    base_message = (
        f"Ты — профессиональный персональный фитнес-тренер.\n"
        f"Твой клиент: {username}, дата рождения: {formatted_birth_date}.\n"
        f"Главная цель клиента: {goal}.\n"
        f"Уровень физической подготовки: {fitness_level}.\n"
        f"Параметры тела:\n"
        f"- Пол: {gender}\n"
        f"- Рост: {height} см\n"
        f"- Вес: {weight} кг\n"
        f"Наличие оборудования: {'да' if has_equipment else 'нет'}.\n"
    )

    if task == "nutrition":
        message = base_message + (
            "\nТвоя задача — составить **разнообразный** план питания на один день, "
            "учитывая параметры клиента и его цель. Продукты должны быть из **разных категорий**: "
            "мясо, рыба, яйца, овощи, фрукты, крупы, орехи, молочные продукты и полезные жиры.\n\n"
            "Выбирай **подходящую стратегию питания** в зависимости от цели клиента:\n"
            "- Для похудения: белковая диета, высокое содержание клетчатки, низкий уровень жиров\n"
            "- Для общей физической формы и выносливости: сбалансированное питание по БЖУ\n"
            "- Для набора массы: высококалорийная и углеводно-белковая диета\n\n"
            "Допустимые вариации рациона (выбирай подходящую): мясоед, палео, средиземноморская, вегетарианская, "
            "кето, белковая.\n\n"
            "Калорийность должна быть:\n"
            "- Похудение: минимум 1500 ккал\n"
            "- Поддержание: минимум 2000 ккал\n"
            "- Масса: минимум 3000 ккал\n\n"
            "Структура:\n"
            "- 3 приёма пищи (завтрак, обед, ужин)\n"
            "- для каждого: список продуктов (2–4), граммы, калории, БЖУ\n"
            "- итоговая калорийность дня\n\n"
            "**Формат ответа строго JSON**:\n"
            "{\n"
            "  \"meals\": {\n"
            "    \"breakfast\": {\"items\": [\"продукт1\", \"продукт2\"], \"grams\": [0, 0], \"calories\": 0, "
            "\"proteins\": 0, \"fats\": 0, \"carbs\": 0},\n"
            "    \"lunch\": {...},\n"
            "    \"dinner\": {...}\n"
            "  },\n"
            "  \"calories\": 0\n"
            "}\n\n"
            "Отвечай **только JSON-объектом**, без пояснений и текста вне формата."
        )

    elif task == "workout":
        message = base_message + (
            "\nТвоя задача — составить **разнообразный и эффективный** план тренировки на один день, "
            "опираясь на уровень клиента, цель и доступное оборудование.\n\n"
            "Выбирай **наиболее подходящий тип тренировки**:\n"
            "- Для похудения и выносливости: круговая, HIIT, функциональная, кардио\n"
            "- Для набора массы: сплит (верх/низ, грудь/плечи, ноги/пресс, спина/руки), "
            "фуллбади с прогрессией нагрузки\n"
            "- Для общей физической формы: фуллбади, гибридные и стабилизирующие тренировки\n\n"
            "**Формат JSON:**\n"
            "{\n"
            "  \"title\": \"Название тренировки\",\n"
            "  \"exercises\": [\n"
            "    {\"name\": \"упражнение1\", \"sets\": 0, \"reps\": 0, \"description\": \"описание техники\"},\n"
            "    ...\n"
            "  ]\n"
            "}\n\n"
            "Подбирай упражнения под уровень клиента и наличие оборудования. Старайся варьировать "
            "тренировки каждый день.\n"
            "Отвечай **только JSON-объектом**, без пояснений и текста вне формата."
        )

    else:
        message = base_message + (
            "\nТвоя задача — консультировать и помогать клиенту в достижении его целей по фитнесу и здоровью. "
            "Ты должен самостоятельно выбирать наиболее подходящие рекомендации по тренировкам и питанию, "
            "исходя из параметров клиента."
        )

    return {"role": "system", "content": message}
